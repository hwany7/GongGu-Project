<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  	
<mapper namespace="review">

 	<!-- postContent에서 top3 리뷰 가져오기 -->
 	<select id="getReviewFromContent" parameterType="int" resultType="dto.ReviewDto">
 		select * from
		    (select review_num, member_id, payment_id, title, upload_date, 
		    		replycount, readcount, likecount, content, rownum r
		    from review_gg
		    where payment_id in 
		            (select payment_id
		            from payment_gg
		            where application_id in
		                (select application_id
		                from application_gg
		                where post_id in
		                    (select post_id
		                    from post_gg
		                    where product_id = #{product_id})))
		    order by likecount desc)
		where rownum &lt;=5
 	</select>
 	
  	<!-- 리뷰content 페이지에서 리뷰 데이터 -->
	<select id="getReviewContent" parameterType="int" resultType="dto.join.ReviewContentDto">
		select nickname, member_gg.member_id, review_num, payment_id, title, upload_date, 
				replycount, readcount, likecount, content
		from member_gg, review_gg
		where member_gg.member_id = review_gg.member_id
		and review_num = #{review_num}
	</select>
	
	<!-- 조회수 올리기 -->
 	<update id="addCountFromReview" parameterType="int">
 		update review_gg set readcount = readcount+1 where review_num = #{review_num}
 	</update>
 	
 	 <!-- 이미 좋아요 눌렀는지 체크 -->
	<select id="checkLike" parameterType="java.util.Map" resultType="int">
 		select count(*) from like_gg where member_id=#{member_id} and review_num=#{review_num}
 	</select>
 	
 	<!-- 좋아요 하기-->
	<insert id="insertLike" parameterType="dto.LikeDto">
		insert into like_gg(review_num, member_id) values( #{review_num}, #{member_id} )	
	</insert>
	
	<!-- like 증가 -->
	<update id="addlike" parameterType="int">
		update REVIEW_GG set likecount=likecount+1 where review_num=#{review_num}
	</update>
	
	 <!-- 리뷰에 댓글 작성시 리뷰개수 변경  +1-->
 	<update id="updateReplycountFromReview" parameterType="int">
 		update review_gg set replycount = replycount + 1 where review_num = #{review_num}
 	</update>
 	
 	 <!-- 리뷰에 댓글 삭제시 리뷰개수 변경  -1 -->
 	<update id="deleteupdateReplycountFromReview" parameterType="int">
 		update review_gg set replycount = replycount - 1 where review_num = #{review_num}
 	</update>	
 	
 	<!-- 리뷰 전체 개수 -->
	<select id="getReviewCount" resultType="int">
		select count(*) from review_gg
	</select>
	
	<!-- 검색된 리뷰 전체 개수 -->
	<select id="geReviewCountBySearch" parameterType="String" resultType="int">
		select count(*) from review_gg, member_gg 
		where review_gg.member_id = member_gg.member_id and
				(upper(review_gg.title) like upper('%'|| #{search} ||'%') or upper(member_gg.nickname) like upper('%'|| #{search} ||'%'))
	</select>
	
	<!-- 리뷰리스트 -->
 	<select id="getReviewtFromReviewList" parameterType="util.PageInfo" resultType="dto.join.ReviewContentDto">
		select  *
		from (select nickname,
				member_id,
				review_num,
				payment_id,
				title,
				upload_date,
				replycount,
				readcount,
				likecount,
				content,
				rownum r
			from (select nickname,
					member_gg.member_id,
					review_num,
					payment_id,
					title,
					upload_date, 
					replycount,
					readcount, 
					likecount, 
					content
        			from member_gg, review_gg
        			where member_gg.member_id = review_gg.member_id
        				and (upper(review_gg.title) like upper('%'|| trim(#{search, jdbcType=VARCHAR}) ||'%') 
		            		or upper(member_gg.nickname) like upper('%'|| trim(#{search, jdbcType=VARCHAR}) ||'%'))
                    order by review_num desc)
		        )
		where r &gt;= #{start} and r &lt;=#{end}
	</select>	
	
</mapper>

